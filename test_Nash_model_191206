#https://amunategui.github.io/binary-outcome-modeling/

#######################################################
#test for nash sample
#binary outcome
#check for best result
#fill missing
#auto var selection
#model fitting
#######################################################

#library
library(dplyr)
library(ggplot2)
#library(readr)
#library(gtools)
###########################################
#library
# library(mice)
# library(dplyr)
library(randomForest)
# library(rcompanion)
#Install class package
# install.packages('class')
# Load class package
# library(class)
library(caret)
# library(xgboost)
# library(readr)
# library(stringr)
# library(nnet)
# library(kernlab)

 
#######################################################
#######################################################
#######################################################
#path
path10 = "D:/cj/2019/10/"
path11 = "D:/cj/2019/11/"
path12 = "D:/cj/2019/12/"

#today's date
today = format(Sys.Date(),"%Y%m%d")

#######################################################

data0_N <-read.csv(paste(path12, "nash_sample_fromZF191206_v1.csv", sep = ""), stringsAsFactors = F)

data0_F <- read.csv(paste(path12, "nash_sample_fromZF191206_v2.csv", sep = "") )

varList_F <- colnames(data0_F)[1:41]
depVar <- colnames(data0_F)[42]

#bar plot for factor vars
#stacking bar plot of the first factor var

ggplot(data0_F, aes(x = data0_F[, 3], y =  data0_F[,1])) +
  xlab(colnames(data0_F)[3]) +
  geom_bar(
    aes(color = data0_F[, 42], fill =  data0_F[, 42]),
    stat = "identity", position = position_stack()
  )  


# ggplot(data0_F, aes(x = data0_F[, 4], y =  data0_F[,1])) +
#   xlab(colnames(data0_F)[4]) +
#   geom_bar(
#     aes(color = data0_F[, 42], fill =  data0_F[, 42]),
#     stat = "identity", position = position_stack()
#   )  

for(i in 2:10){
  print(ggplot(data0_F, aes(x = data0_F[, i], y =  data0_F[,1])) +
    xlab(colnames(data0_F)[i]) +
    geom_bar(
      aes(color = data0_F[, 42], fill =  data0_F[, 42]),
      stat = "identity", position = position_stack()
    )
  )
}

for(i in 11:20){
  print(ggplot(data0_F, aes(x = data0_F[, i], y =  data0_F[,1])) +
          xlab(colnames(data0_F)[i]) +
          geom_bar(
            aes(color = data0_F[, 42], fill =  data0_F[, 42]),
            stat = "identity", position = position_stack()
          )
  )
}


for(i in 21:30){
  print(ggplot(data0_F, aes(x = data0_F[, i], y =  data0_F[,1])) +
          xlab(colnames(data0_F)[i]) +
          geom_bar(
            aes(color = data0_F[, 42], fill =  data0_F[, 42]),
            stat = "identity", position = position_stack()
          )
  )
}

for(i in 31:42){
  print(ggplot(data0_F, aes(x = data0_F[, i], y =  data0_F[,1])) +
          xlab(colnames(data0_F)[i]) +
          geom_bar(
            aes(color = data0_F[, 42], fill =  data0_F[, 42]),
            stat = "identity", position = position_stack()
          )
  )
}

#data mining part done on excel
#readin half done data
data0_F <- read.csv(paste(path12, "nash_sample_fromZF191206_v2_2.csv", sep = "") )

data0_F <- as.data.frame(lapply(data0_F, as.factor))

##############################

data0_N <-read.csv(paste(path12, "nash_sample_fromZF191206_v1_2.csv", sep = ""), stringsAsFactors = F)


data0_N <- as.data.frame(lapply(data0_N, as.numeric))
count_NA <- apply(data0_N, 2, function(col)sum(is.na(col))/length(col))
data0_N <- data0_N[,count_NA<0.5]


##############################
#combine data

data1 <- cbind.data.frame(data0_N[,2:62], data0_F )
# 
# smp_size <- floor(0.75 * nrow(data1))
# set.seed(123)
# data1_ind <- sample(seq_len(nrow(data1)), size = smp_size)
set.seed(1234)
data1_ind <- createDataPartition(data1[,100], p = .75, list = FALSE, times = 1)

train <- data1[data1_ind, ]
test <- data1[-data1_ind, ]

objControl <- trainControl(method='cv', number=3, returnResamp='none', 
                           summaryFunction = twoClassSummary, classProbs = TRUE)


objModel <- train(train[,1:99], train[,100], 
                  method='gbm', 
                  trControl=objControl,  
                  metric = "ROC",
                  preProc = c("center", "scale"))

#explore

summary(objModel)

#tuning parameters

print(objModel)

#evaluate

predictions <- predict(object=objModel, test[,1:99], type='raw')
head(predictions)

print(postResample(pred=predictions, obs=as.factor(test[,100])))


library(pROC)
predictions <- predict(object=objModel, test[,1:99], type='prob')
head(predictions)



##################
#try variable selection first
####################
#variable importance 
####################
#random forest
fit = randomForest(factor("是否NASH")~., data = train)

VI_F = importance(fit)




